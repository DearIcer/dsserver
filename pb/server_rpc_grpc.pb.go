// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: server_rpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameDscRealmClient is the client API for GameDscRealm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameDscRealmClient interface {
	CreateRealm(ctx context.Context, in *RpcCreateRealmReq, opts ...grpc.CallOption) (*RpcCreateRealmResp, error)
	RemoveRealm(ctx context.Context, in *RpcCreateRealmReq, opts ...grpc.CallOption) (*RpcCreateRealmResp, error)
}

type gameDscRealmClient struct {
	cc grpc.ClientConnInterface
}

func NewGameDscRealmClient(cc grpc.ClientConnInterface) GameDscRealmClient {
	return &gameDscRealmClient{cc}
}

func (c *gameDscRealmClient) CreateRealm(ctx context.Context, in *RpcCreateRealmReq, opts ...grpc.CallOption) (*RpcCreateRealmResp, error) {
	out := new(RpcCreateRealmResp)
	err := c.cc.Invoke(ctx, "/pb.GameDscRealm/CreateRealm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDscRealmClient) RemoveRealm(ctx context.Context, in *RpcCreateRealmReq, opts ...grpc.CallOption) (*RpcCreateRealmResp, error) {
	out := new(RpcCreateRealmResp)
	err := c.cc.Invoke(ctx, "/pb.GameDscRealm/RemoveRealm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameDscRealmServer is the server API for GameDscRealm service.
// All implementations must embed UnimplementedGameDscRealmServer
// for forward compatibility
type GameDscRealmServer interface {
	CreateRealm(context.Context, *RpcCreateRealmReq) (*RpcCreateRealmResp, error)
	RemoveRealm(context.Context, *RpcCreateRealmReq) (*RpcCreateRealmResp, error)
	mustEmbedUnimplementedGameDscRealmServer()
}

// UnimplementedGameDscRealmServer must be embedded to have forward compatible implementations.
type UnimplementedGameDscRealmServer struct {
}

func (UnimplementedGameDscRealmServer) CreateRealm(context.Context, *RpcCreateRealmReq) (*RpcCreateRealmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRealm not implemented")
}
func (UnimplementedGameDscRealmServer) RemoveRealm(context.Context, *RpcCreateRealmReq) (*RpcCreateRealmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRealm not implemented")
}
func (UnimplementedGameDscRealmServer) mustEmbedUnimplementedGameDscRealmServer() {}

// UnsafeGameDscRealmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameDscRealmServer will
// result in compilation errors.
type UnsafeGameDscRealmServer interface {
	mustEmbedUnimplementedGameDscRealmServer()
}

func RegisterGameDscRealmServer(s grpc.ServiceRegistrar, srv GameDscRealmServer) {
	s.RegisterService(&GameDscRealm_ServiceDesc, srv)
}

func _GameDscRealm_CreateRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcCreateRealmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDscRealmServer).CreateRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameDscRealm/CreateRealm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDscRealmServer).CreateRealm(ctx, req.(*RpcCreateRealmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDscRealm_RemoveRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcCreateRealmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDscRealmServer).RemoveRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameDscRealm/RemoveRealm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDscRealmServer).RemoveRealm(ctx, req.(*RpcCreateRealmReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GameDscRealm_ServiceDesc is the grpc.ServiceDesc for GameDscRealm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameDscRealm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GameDscRealm",
	HandlerType: (*GameDscRealmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRealm",
			Handler:    _GameDscRealm_CreateRealm_Handler,
		},
		{
			MethodName: "RemoveRealm",
			Handler:    _GameDscRealm_RemoveRealm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server_rpc.proto",
}

// DsaDscARealmClient is the client API for DsaDscARealm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DsaDscARealmClient interface {
	StreamService(ctx context.Context, opts ...grpc.CallOption) (DsaDscARealm_StreamServiceClient, error)
}

type dsaDscARealmClient struct {
	cc grpc.ClientConnInterface
}

func NewDsaDscARealmClient(cc grpc.ClientConnInterface) DsaDscARealmClient {
	return &dsaDscARealmClient{cc}
}

func (c *dsaDscARealmClient) StreamService(ctx context.Context, opts ...grpc.CallOption) (DsaDscARealm_StreamServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &DsaDscARealm_ServiceDesc.Streams[0], "/pb.DsaDscARealm/StreamService", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsaDscARealmStreamServiceClient{stream}
	return x, nil
}

type DsaDscARealm_StreamServiceClient interface {
	Send(*StreamClientEvent) error
	Recv() (*StreamServerEvent, error)
	grpc.ClientStream
}

type dsaDscARealmStreamServiceClient struct {
	grpc.ClientStream
}

func (x *dsaDscARealmStreamServiceClient) Send(m *StreamClientEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dsaDscARealmStreamServiceClient) Recv() (*StreamServerEvent, error) {
	m := new(StreamServerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DsaDscARealmServer is the server API for DsaDscARealm service.
// All implementations must embed UnimplementedDsaDscARealmServer
// for forward compatibility
type DsaDscARealmServer interface {
	StreamService(DsaDscARealm_StreamServiceServer) error
	mustEmbedUnimplementedDsaDscARealmServer()
}

// UnimplementedDsaDscARealmServer must be embedded to have forward compatible implementations.
type UnimplementedDsaDscARealmServer struct {
}

func (UnimplementedDsaDscARealmServer) StreamService(DsaDscARealm_StreamServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamService not implemented")
}
func (UnimplementedDsaDscARealmServer) mustEmbedUnimplementedDsaDscARealmServer() {}

// UnsafeDsaDscARealmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DsaDscARealmServer will
// result in compilation errors.
type UnsafeDsaDscARealmServer interface {
	mustEmbedUnimplementedDsaDscARealmServer()
}

func RegisterDsaDscARealmServer(s grpc.ServiceRegistrar, srv DsaDscARealmServer) {
	s.RegisterService(&DsaDscARealm_ServiceDesc, srv)
}

func _DsaDscARealm_StreamService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DsaDscARealmServer).StreamService(&dsaDscARealmStreamServiceServer{stream})
}

type DsaDscARealm_StreamServiceServer interface {
	Send(*StreamServerEvent) error
	Recv() (*StreamClientEvent, error)
	grpc.ServerStream
}

type dsaDscARealmStreamServiceServer struct {
	grpc.ServerStream
}

func (x *dsaDscARealmStreamServiceServer) Send(m *StreamServerEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dsaDscARealmStreamServiceServer) Recv() (*StreamClientEvent, error) {
	m := new(StreamClientEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DsaDscARealm_ServiceDesc is the grpc.ServiceDesc for DsaDscARealm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DsaDscARealm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DsaDscARealm",
	HandlerType: (*DsaDscARealmServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamService",
			Handler:       _DsaDscARealm_StreamService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server_rpc.proto",
}
